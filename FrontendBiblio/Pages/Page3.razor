@page "/author"

@inject HttpClient _client;

@using System.Net.Http.Json
@using backendbiblioteca.Modelo
@using FrontendBiblio.Data
<MudButton OnClick="(args) => AgregarNuevoRegistro()" Variant="Variant.Filled" Color="Color.Primary">Añadir</MudButton>

<MudDataGrid T="Autor" Items="@Autores" ReadOnly="@_readOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
    StartedEditingItem="@StartedEditingItem" CancelledEditingItem="@CancelledEditingItem" CommittedItemChanges="@CommittedItemChanges"
    Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
    <Columns>
        <Column T="Author" Field="AuthorID" Title="Id" IsEditable="false" />
        <Column T="Author" Field="Name" />
        <Column T="Author" Field="Country" />
        <Column T="Author" Field="Books" />
        <Column T="Autor" Field="Cathegory" Title="Categoria" />
        <Column T="Autor" Hidden="@(_isCellEditMode  _readOnly  _editTriggerRowClick)" CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Edit" OnClick="@context.Actions.StartEditingItem" />
                <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Delete" OnClick="(args)=> EliminarEvento(context.Item)" />
            </CellTemplate>
        </Column>
    </Columns>
</MudDataGrid>



@code {
    private IEnumerable<Author> Authors = new List<Author>();
    private bool _readOnly;
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick;

    protected override async Task OnInitializedAsync()
    {
        var elemento = new List<Author>();
        _client.BaseAddress = new Uri("");

        var requestMessage = new HttpRequestMessage(HttpMethod.Get, "Biblioteca/ConsultarAutor");
        var respuesta = await _client.SendAsync(requestMessage);

        if(respuesta.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var responseBody = await respuesta.Content.ReadAsStringAsync();
            var AuthorLists = System.Text.Json.JsonSerializer.Deserialize<List<Author>>(responseBody);
            Authors = AuthorLists;
        }


    }

    void DelEvent(Author item)
    {
        ((List<Author>)Authors).Remove(item);
        StateHasChanged();
    }

    void AddNewRegister()
    {
        var elemento = new Author
            {
               AuthorID = 69,
               Name = "Allan Poe",
               Country = "USA",
               Books = 420,
               Cathegory = "Horror"
            };
        ((List<Author>)Authors).Add(elemento);
        StateHasChanged();
    }
    
    void StartedEditingItem(Author item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CancelledEditingItem(Author item)
    {
        _events.Insert(0, $"Event = CancelledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }
    
    void CommittedItemChanges(Author item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
        StateHasChanged();
    }
}