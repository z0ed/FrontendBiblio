@page "/student"

@inject HttpClient _client;

@using System.Net.Http.Json
@using backendbiblioteca.Modelo
@using FrontendBiblio.Data
<MudButton OnClick="(args) => AddNewRegister()" Variant="Variant.Filled" Color="Color.Primary">Añadir</MudButton>

<MudDataGrid T="Estudiante" Items="@Students" ReadOnly="@_readOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
       StartedEditingItem="@StartedEditingItem" CancelledEditingItem="@CancelledEditingItem" CommittedItemChanges="@CommittedItemChanges"
       Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
  <Columns>
    <Column T="Student" Field="ID" Title="Id" IsEditable="false" />
    <Column T="Student Field="@nameof(Student.Nombre)" />
    <Column T="Student" Field="@nameof(Student.Carreer)" />
    <Column T="Student" Field="@nameof(Student.Semester)" />
    <Column T="Student" Field="@nameof(Student.Name)" />
    <Column T="Student" Field="@nameof(Student.IDStudent)" />
    <Column T="Student" Field="@nameof(Student.Loans)" Title="Loans" />
    <Column T="Student" Hidden="@(_isCellEditMode  _readOnly  _editTriggerRowClick)" CellClass="d-flex justify-end">
      <CellTemplate>
        <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Edit" OnClick="@context.Actions.StartEditingItem" />
        <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Delete" OnClick="(args)=> EliminarEvento(context.Item)" />
      </CellTemplate>
    </Column>
  </Columns>
</MudDataGrid>



@code {
  private IEnumerable<Student> Students = new List<Student>();
  private bool _readOnly;
  private bool _isCellEditMode;
  private List<string> _events = new();
  private bool _editTriggerRowClick;

  protected override async Task OnInitializedAsync()
  {
    try
    {

      var elemento = new List<Student>();
      _client.BaseAddress = new Uri("https://localhost:7174/");

      var requestMessage = new HttpRequestMessage(HttpMethod.Get, "Biblioteca/ConsultarEstudiante");
      var respuesta = await _client.SendAsync(requestMessage);

      if (respuesta.StatusCode == System.Net.HttpStatusCode.OK)
      {
        var responseBody = await respuesta.Content.ReadAsStringAsync();
        var StudentLists = System.Text.Json.JsonSerializer.Deserialize<List<Student>>(responseBody);
        Students = StudentLists;
      }
      await InvokeAsync(StateHasChanged);

    }
    catch (Exception es)
    {

    }


  }

  void DelEvent(Student item)
  {
    ((List<Student>)Students).Remove(item);
    StateHasChanged();
  }

  void AddNewRegister()
  {
    var elemento = new Student
      {
        IDStudent = 0,
        Name = "OLMEDo",
        Semester = 1,
        Carreer = "Engineering",
        Loans = 2
      };
    ((List<Student>)Students).Add(elemento);
    StateHasChanged();
  }
  
  void StartedEditingItem(Student item)
  {
    _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
  }

  void CancelledEditingItem(Student item)
  {
    _events.Insert(0, $"Event = CancelledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
  }
 
  void CommittedItemChanges(Student item)
  {
    _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    StateHasChanged();
  }
}